if(updown=='up' & tvals[i]<1) {
x[switch]<-min(x)-sd(x)
y[switch]<-max(y)+sd(y)
}
if(updown=='up' & tvals[i]>1) {
x[switch]<-max(x)+sd(x)
y[switch]<-max(y)+sd(y)
}
tvals[i]<-summary(lm(y~x))$coeff[2,3]
pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
}
##############################
nreplicates<-0
plot(pvals,(nes),pch=19,log='x',xaxt='n',yaxt='n',col=c('blue','black')[(pres=='plain')+1],ylim=c(0,300))
axis(side=1,pbreaks,at=pbreaks)
axis(side=2,unique(nes),at=unique(nes))
abline(v=pbreaks[pbins],lty=2)
abline(h=nes,lty=2)
text(pvals[pres!="plain"],nes[pres!="plain"]+10,pres[pres!="plain"])
#text(pvals[whichrep],nes[whichrep]-10,"rep")
plot(pvals,(nes),pch=19,log='x',xaxt='n',yaxt='n',col=c('blue','black')[(pres=='plain')+1],ylim=c(0,300))
axis(side=1,pbreaks,at=pbreaks)
axis(side=2,unique(nes),at=unique(nes))
abline(v=pbreaks[pbins],lty=2)
abline(h=nes,lty=2)
text(pvals[pres!="plain"],nes[pres!="plain"]+10,pres[pres!="plain"])
#text(pvals[whichrep],nes[whichrep]-10,"rep")
sample(c(4,4,3,1,5,5,2,3,1,2))
pres<-c(rep('plain',length=20),c('outlier','lowess','bestFit','axesScale','axesLabel')[c(4,4,3,1,5,5,2,3,1,2,3 1 3 1 4 4 2 2 5 5)])
pres<-c(rep('plain',length=20),c('outlier','lowess','bestFit','axesScale','axesLabel')[c(4,4,3,1,5,5,2,3,1,2,3, 1, 3, 1, 4,4, 2, 2, 5, 5)])
plot(pvals,(nes),pch=19,log='x',xaxt='n',yaxt='n',col=c('blue','black')[(pres=='plain')+1],ylim=c(0,300))
axis(side=1,pbreaks,at=pbreaks)
axis(side=2,unique(nes),at=unique(nes))
abline(v=pbreaks[pbins],lty=2)
abline(h=nes,lty=2)
text(pvals[pres!="plain"],nes[pres!="plain"]+10,pres[pres!="plain"])
#text(pvals[whichrep],nes[whichrep]-10,"rep")
c('blue','black')[(pres=='plain')+1]
length(c('blue','black')[(pres=='plain')+1])
pres<-c(rep('plain',length=20),c('outlier','lowess','bestFit','axesScale','axesLabel')[c(4,4,3,1,5,5,2,3,1,2,3, 4,1,3,1,4,2,2,5,5)])
plot(pvals,(nes),pch=19,log='x',xaxt='n',yaxt='n',col=c('blue','black')[(pres=='plain')+1],ylim=c(0,300))
axis(side=1,pbreaks,at=pbreaks)
axis(side=2,unique(nes),at=unique(nes))
abline(v=pbreaks[pbins],lty=2)
abline(h=nes,lty=2)
text(pvals[pres!="plain"],nes[pres!="plain"]+10,pres[pres!="plain"])
#text(pvals[whichrep],nes[whichrep]-10,"rep")
#THIS IS NO LONGER HOW YOU MAKE DATA FOR THE SURVEY!!!!!!!
source('~/.active-rstudio-document', echo=TRUE)
pres<-c(rep('plain',length=20),c('outlier','lowess','bestFit','axesScale','axesLabel')[c(4,4,3,1,5,5,2,3,1,2,3, 1, 3, 1, 5,4, 2, 2, 5, 4)])
plot(pvals,(nes),pch=19,log='x',xaxt='n',yaxt='n',col=c('blue','black')[(pres=='plain')+1],ylim=c(0,300))
axis(side=1,pbreaks,at=pbreaks)
axis(side=2,unique(nes),at=unique(nes))
abline(v=pbreaks[pbins],lty=2)
abline(h=nes,lty=2)
text(pvals[pres!="plain"],nes[pres!="plain"]+10,pres[pres!="plain"])
#text(pvals[whichrep],nes[whichrep]-10,"rep")
rm(list=ls())
source('~/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3/generate_data_1pval_coursera1.r', echo=TRUE)
source('~/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3/Template1pval_coursera1.r', echo=TRUE)
rm(list=ls())
source('~/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3/Template1pval_coursera1.r', echo=TRUE)
pbins<-matrix(c(1,2,  2,3,   3,4,  1,2,   2,3,   3,4, 2,4), ncol=nplots,byrow=T)
set.seed(5231423)
nreps<-7
nplots<-2 #number of plots to compare against
nes2<-c(100,100,100,350,350,350,100)
#first 6 are harder than last one, which has more difference in the bins
n2<-matrix(nes2,nrow=nreps,ncol=nplots) #FIX n
#FOLLOWING CODE HAS BEEN BLOCKED B/C WE'RE NOW FIXING N!!!!
# n2same<-rep(c(T,T,F),nreps)[sample(nreps)]
# n2[n2same,]<-n2[n2same,1]
# for(i in 1:nreps){
# if(n2[i,1]==n2[i,2]) n2same[i]<-TRUE
# }
pbreaks<-c(.001,.01,.05,1)
#pbins will hold the value of the lowest pval
#ensure semi-specific distances
pbins<-matrix(c(1,2,  2,3,   3,4,  1,2,   2,3,   3,4, 2,4), ncol=nplots,byrow=T)
pbins
pbreaks<-c(.001,.01,.05,1)
#pbins will hold the value of the lowest pval
#ensure semi-specific distances
pbins<-matrix(c(1,2,  2,3,   3,4,  1,2,   2,3,   3,4, 2,4), ncol=nplots,byrow=T)
for(i in 1:dim(pbins)[1]) pbins[i,]<-pbins[i,sample(2)] #randomly shuffle the columns
x2<-list()
y2<-list()
p2<-matrix(nrow=nreps,ncol=nplots)
pbins
for(i in 1:dim(pbins)[1]) pbins[i,]<-pbins[i, ] #randomly shuffle the columns
sample(2)
sample(2)
sample(2)
sample(2)
for(i in 1:dim(pbins)[1]) pbins[i,]<-pbins[i,sample(2)] #randomly shuffle the columns
pbins
for(i in 1:dim(pbins)[1]) pbins[i,]<-pbins[i,sample(2)] #randomly shuffle the columns
pbins
rm(list=ls()
)
source('~/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3/generate_data_2compares_coursera1.r', echo=TRUE)
testme<-T
if(testme==T){
for(i in 1:nreps){
par(mfrow=c(1,2))
plot(x2[[i]][[1]],y2[[i]][[1]],main=nes2[i],xlab='X',ylab='Y')
plot(x2[[i]][[2]],y2[[i]][[2]],main=nes2[i],ylab='Y',xlab='X')
pbreaks[pbins[i,]]
print(round(p2[i,],digits=5))
readline(prompt="go")
}
}
save(list=c('n2','nes2','nreps','p2','pbins','pbreaks','x2','y2'),file='data_for_2compare_coursera1.RData')
nreps
rm(list=ls())
set.seed(813029)
#Here we're just FIXING N
#NO REPLICATES
#We end up with rows of:
# half sig
# mostly sig
# no sig
# mostly sig
# all sig
# mostly sig
# half sig
#Intro question:
nreps<-6
nplots<-4
N<-nplots*nreps
nes4<-rep(c(100,200,100,150,100,100),length=N)
n4<-matrix(nes4,ncol=4)
n4same<-rep(c(T,T,T),length=nreps)
#n4[n4same,]<-n4[n4same,1]
#add in the other sames
# for(i in 1:nreps){
# if(n4[i,1]==n4[i,2]&n4[i,2]==n4[i,2]&n4[i,2]==n4[i,4])n4same[i]<-T
# }
pbreaks<-c(.001,.01,.05,.15,1) #only marking those that are significant
pbins<-matrix(rep(1:length(pbreaks),length=nreps*nplots)[sample(nreps*nplots)], ncol=nplots)
x4<-list()
y4<-list()
p4<-matrix(nrow=nreps,ncol=nplots)
pbins #LOOKS GOOD!
for(i in 1:nreps){
if(i %in% c(1:100*nreps/100)) print(i)
x4[[i]]<-list()
y4[[i]]<-list()
#ensure that one of the p-values is the lowest (no ties)
for(j in 1:nplots){
tryagain<-T
while(tryagain==T){
n<-n4[i,j]
x<-rnorm(n)
e<-rnorm(n)
t<-qnorm(pbreaks[pbins[i,j]],mean=0,sd=1)*sample(c(-1,1),1)
if(abs(t)>5)t<-0 #guards against when the bin is 1, and quantile has infinite size
bhat<-t*sd(e)/(sqrt(n)*sd(x))
if(pbreaks[pbins[i,j]]>.05) bhat<-0 #Always generate it actually from a null in this case
y<-x*bhat+e
x4[[i]][[j]]<-x
y4[[i]][[j]]<-y
pi<-summary(lm(y~x))$coef[2,4]
p4[i,j]<-pi
binj<-min(which(pi<pbreaks))
if(binj==pbins[i,j]){ tryagain<-F}
}
}
}
#HERE WE'LL SKIP REPLICATES
# num_new_reps<-floor(nreps/10)
rm(list=ls())
#5 plots question:
set.seed(813029)
#Here we're just FIXING N
#NO REPLICATES
#We end up with rows of:
# half sig
# mostly sig
# no sig
# mostly sig
# all sig
# mostly sig
# half sig
#Intro question:
nreps<-6
nplots<-4
N<-nplots*nreps
nes4<-rep(c(100,200,100,150,100,100),length=N)
n4<-matrix(nes4,ncol=4)
n4same<-rep(c(T,T,T),length=nreps)
#n4[n4same,]<-n4[n4same,1]
#add in the other sames
# for(i in 1:nreps){
# if(n4[i,1]==n4[i,2]&n4[i,2]==n4[i,2]&n4[i,2]==n4[i,4])n4same[i]<-T
# }
pbins
################################################
################################################
#5 plots question:
set.seed(813029)
#Here we're just FIXING N
#NO REPLICATES
#We end up with rows of:
# half sig
# mostly sig
# no sig
# mostly sig
# all sig
# mostly sig
# half sig
#Intro question:
nreps<-6
nplots<-4
N<-nplots*nreps
nes4<-rep(c(100,200,100,150,100,100),length=N)
n4<-matrix(nes4,ncol=4)
n4same<-rep(c(T,T,T),length=nreps)
#n4[n4same,]<-n4[n4same,1]
#add in the other sames
# for(i in 1:nreps){
# if(n4[i,1]==n4[i,2]&n4[i,2]==n4[i,2]&n4[i,2]==n4[i,4])n4same[i]<-T
# }
pbreaks<-c(.001,.01,.05,.15,1) #only marking those that are significant
pbins<-matrix(rep(1:length(pbreaks),length=nreps*nplots)[sample(nreps*nplots)], ncol=nplots)
x4<-list()
y4<-list()
p4<-matrix(nrow=nreps,ncol=nplots)
pbins #LOOKS GOOD!
plots question:
set.seed(813029)
#Here we're just FIXING N
#NO REPLICATES
#We end up with rows of:
# half sig
# mostly sig
# no sig
# mostly sig
# all sig
# mostly sig
# half sig
#Intro question:
nreps<-7
nplots<-4
N<-nplots*nreps
nes4<-rep(c(100,200,100,150,100,100),length=N)
n4<-matrix(nes4,ncol=4)
n4same<-rep(c(T,T,T),length=nreps)
#n4[n4same,]<-n4[n4same,1]
#add in the other sames
# for(i in 1:nreps){
# if(n4[i,1]==n4[i,2]&n4[i,2]==n4[i,2]&n4[i,2]==n4[i,4])n4same[i]<-T
# }
pbreaks<-c(.001,.01,.05,.15,1) #only marking those that are significant
pbins<-matrix(rep(1:length(pbreaks),length=nreps*nplots)[sample(nreps*nplots)], ncol=nplots)
x4<-list()
y4<-list()
p4<-matrix(nrow=nreps,ncol=nplots)
pbins #LOOKS GOOD!
#Intro question:
nreps<-7
nplots<-4
N<-nplots*nreps
nes4<-rep(c(100,200,100,150,100,100),length=N)
n4<-matrix(nes4,ncol=4)
n4same<-rep(c(T,T,T),length=nreps)
#n4[n4same,]<-n4[n4same,1]
#add in the other sames
# for(i in 1:nreps){
# if(n4[i,1]==n4[i,2]&n4[i,2]==n4[i,2]&n4[i,2]==n4[i,4])n4same[i]<-T
# }
pbreaks<-c(.001,.01,.05,.15,1) #only marking those that are significant
pbins<-matrix(rep(1:length(pbreaks),length=nreps*nplots)[sample(nreps*nplots)], ncol=nplots)
x4<-list()
y4<-list()
p4<-matrix(nrow=nreps,ncol=nplots)
pbins #LOOKS GOOD!
for(i in 1:nreps){
if(i %in% c(1:100*nreps/100)) print(i)
x4[[i]]<-list()
y4[[i]]<-list()
#ensure that one of the p-values is the lowest (no ties)
for(j in 1:nplots){
tryagain<-T
while(tryagain==T){
n<-n4[i,j]
x<-rnorm(n)
e<-rnorm(n)
t<-qnorm(pbreaks[pbins[i,j]],mean=0,sd=1)*sample(c(-1,1),1)
if(abs(t)>5)t<-0 #guards against when the bin is 1, and quantile has infinite size
bhat<-t*sd(e)/(sqrt(n)*sd(x))
if(pbreaks[pbins[i,j]]>.05) bhat<-0 #Always generate it actually from a null in this case
y<-x*bhat+e
x4[[i]][[j]]<-x
y4[[i]][[j]]<-y
pi<-summary(lm(y~x))$coef[2,4]
p4[i,j]<-pi
binj<-min(which(pi<pbreaks))
if(binj==pbins[i,j]){ tryagain<-F}
}
}
}
#HERE WE'LL SKIP REPLICATES
# num_new_reps<-floor(nreps/10)
# newreps<-sample(1:nreps,num_new_reps,replace=F)
# for(i in 1:num_new_reps){
# newpos<-i+nreps
# oldpos<-newreps[i]
# n4<-rbind(n4,n4[oldpos,])
# p4<-rbind(p4,p4[oldpos,])
# n4same[newpos]<-n4same[oldpos]
# pbins<-rbind(pbins,pbins[oldpos,])
# x4[[newpos]]<-x4[[oldpos]]
# y4[[newpos]]<-y4[[oldpos]]
# }
# b4replicates4<-c(1:nreps,newreps)
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3")
save(list=c('n4','nreps','p4','pbins','n4same','pbreaks','x4','y4'),file='data_for_4plots_pilot.RData')
nreps
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3")
rm(list=ls())
#olddir<-getwd()
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3")
load('data_for_4plots_coursera1.RData')
#setwd(olddir)
load('data_for_4plots_coursera1.RData')
dir()
rm(list=ls())
source('~/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3/generate_data_4plots_coursera1.r', echo=TRUE)
rm(list=ls())
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3")
load('data_for_4plots_coursera1.RData')
ls(
)
nreps
nreps
n4same
length(n4same)(
length(n4same)
length(n4same)
length(n4same)
for(i in 1:nreps){
png(paste0("images/4compare_coursera1_',i',.png"), width = 400, height = 400)
plot(x4[[i]][[1]],y4[[i]][[1]],main="Sample 1",xlab="X",ylab="Y")
plot(x4[[i]][[2]],y4[[i]][[2]],main="Sample 2",xlab="X",ylab="Y")
plot(x4[[i]][[3]],y4[[i]][[3]],main="Sample 3",xlab="X",ylab="Y")
plot(x4[[i]][[4]],y4[[i]][[4]],main="Sample 4",xlab="X",ylab="Y")
dev.off()
}
for(i in 1:nreps){
png(paste0("images/4compare_coursera1_",i,".png"), width = 400, height = 400)
plot(x4[[i]][[1]],y4[[i]][[1]],main="Sample 1",xlab="X",ylab="Y")
plot(x4[[i]][[2]],y4[[i]][[2]],main="Sample 2",xlab="X",ylab="Y")
plot(x4[[i]][[3]],y4[[i]][[3]],main="Sample 3",xlab="X",ylab="Y")
plot(x4[[i]][[4]],y4[[i]][[4]],main="Sample 4",xlab="X",ylab="Y")
dev.off()
}
for(i in 1:nreps){
png(paste0("images/4compare_coursera1_",i,".png"), width = 800, height = 800)
par(mfrow=c(2,2))
plot(x4[[i]][[1]],y4[[i]][[1]],main="Sample 1",xlab="X",ylab="Y")
plot(x4[[i]][[2]],y4[[i]][[2]],main="Sample 2",xlab="X",ylab="Y")
plot(x4[[i]][[3]],y4[[i]][[3]],main="Sample 3",xlab="X",ylab="Y")
plot(x4[[i]][[4]],y4[[i]][[4]],main="Sample 4",xlab="X",ylab="Y")
dev.off()
}
################################################
#2 plots question:
set.seed(5231423)
nreps<-7
nplots<-2 #number of plots to compare against
nes2<-c(100,100,100,350,350,350,100)
#first 6 are harder than last one, which has more difference in the bins
n2<-matrix(nes2,nrow=nreps,ncol=nplots) #FIX n
#FOLLOWING CODE HAS BEEN BLOCKED B/C WE'RE NOW FIXING N!!!!
# n2same<-rep(c(T,T,F),nreps)[sample(nreps)]
# n2[n2same,]<-n2[n2same,1]
# for(i in 1:nreps){
# if(n2[i,1]==n2[i,2]) n2same[i]<-TRUE
# }
#2 plots question:
set.seed(5231423)
nreps<-7
nplots<-2 #number of plots to compare against
nes2<-c(100,100,100,350,350,350,100)
#first 6 are harder than last one, which has more difference in the bins
n2<-matrix(nes2,nrow=nreps,ncol=nplots) #FIX n
#FOLLOWING CODE HAS BEEN BLOCKED B/C WE'RE NOW FIXING N!!!!
# n2same<-rep(c(T,T,F),nreps)[sample(nreps)]
# n2[n2same,]<-n2[n2same,1]
# for(i in 1:nreps){
# if(n2[i,1]==n2[i,2]) n2same[i]<-TRUE
# }
pbreaks<-c(.001,.01,.05,1)
#pbins will hold the value of the lowest pval
#ensure semi-specific distances
pbins<-matrix(c(1,2,  2,3,  3,4,  1,2,  3,2,  4,3,  2,4), ncol=nplots,byrow=T)
x2<-list()
y2<-list()
p2<-matrix(nrow=nreps,ncol=nplots)
pbins
pbreaks<-c(.001,.01,.05,1)
#pbins will hold the value of the lowest pval
#ensure semi-specific distances
pbins<-matrix(c(1,2,  3,2,  3,4,  1,2,  3,3,  4,3,  2,4), ncol=nplots,byrow=T)
x2<-list()
y2<-list()
p2<-matrix(nrow=nreps,ncol=nplots)
pbins
pbreaks<-c(.001,.01,.05,1)
#pbins will hold the value of the lowest pval
#ensure semi-specific distances
pbins<-matrix(c(1,2,  3,2,  3,3,  1,2,  3,4,  4,3,  2,4), ncol=nplots,byrow=T)
x2<-list()
y2<-list()
p2<-matrix(nrow=nreps,ncol=nplots)
p2
pbins
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
par(mfrow=c(1,2))
plot(x2[[i]][[1]],y2[[i]][[1]],main="Sample 1",xlab="X",ylab="Y")
plot(x2[[i]][[2]],y2[[i]][[2]],main="Sample 2",xlab="X",ylab="Y")
rm(list=ls())
setwd("C:/Users/Aaron/Dropbox/EDA project/SURVEY")
load('data_for_2compare_pilot.RData')
###################################################################
###################### FIGURE SECTION #############################
###################################################################
for(i in 1:nreps){
png(paste0("images/2compare_coursera1_",i,".png"), width = 400, height = 800)
par(mfrow=c(1,2))
plot(x2[[i]][[1]],y2[[i]][[1]],main="Sample 1",xlab="X",ylab="Y")
plot(x2[[i]][[2]],y2[[i]][[2]],main="Sample 2",xlab="X",ylab="Y")
dev.off()
}
load('data_for_2compare_pilot.RData')
ls()
load('data_for_2compare_pilot.RData')
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3")
load('data_for_2compare_coursera1.RData')
rm(list=ls())
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3")
load('data_for_2compare_coursera1.RData')
###################################################################
###################### FIGURE SECTION #############################
###################################################################
for(i in 1:nreps){
png(paste0("images/2compare_coursera1_",i,".png"), width = 400, height = 800)
par(mfrow=c(1,2))
plot(x2[[i]][[1]],y2[[i]][[1]],main="Sample 1",xlab="X",ylab="Y")
plot(x2[[i]][[2]],y2[[i]][[2]],main="Sample 2",xlab="X",ylab="Y")
dev.off()
}
#SIMPLIFIED FOR COURSERA!
###### AF CODE
###################################################
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3")
load('data_for_2compare_coursera1.RData')
###################################################################
###################### FIGURE SECTION #############################
###################################################################
for(i in 1:nreps){
png(paste0("images/2compare_coursera1_",i,".png"), width = 400, height = 800)
par(mfrow=c(1,2))
plot(x2[[i]][[1]],y2[[i]][[1]],main="Sample 1",xlab="X",ylab="Y")
plot(x2[[i]][[2]],y2[[i]][[2]],main="Sample 2",xlab="X",ylab="Y")
dev.off()
}
source('~/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3/Template2compare_coursera1.r', echo=TRUE)
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera - pvals - feb3")
load('data_for_1plots_coursera1.RData')
pres
pres[21:30]
pres[21:30]
i
x
x<-xes[i,1:n]
n<-nes[i]
x<-xes[i,1:n]
x
range(x)
diff(range(x)
)
plot(x,y,xlab='X',ylab='Y',main=title,xlim=c(min(x)-.2*drx,max(x)+.2*drx,ylim=c(min(y)-.2*dry,max(y)+.2*dry) )
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pres[24]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pres[29]
rm(list=ls())
x[1]<-rnorm(1)
for(i in 2:I){
x[i]<-rnorm(1,x[i-1],1)
}
x<-rep(0,I)
I <- 100 #I is the length of the curve
x<-rep(0,I)
x[1]<-rnorm(1)
for(i in 2:I){
x[i]<-rnorm(1,x[i-1],1)
}
plot(x)
x
plot(x
)
plot(x,x)
