pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
pi<-pvals[i]
bini<-min(which(pi<pbreaks))
if(bini==pbins[i]) tryagain<-F
}
#plot(x,y,main=n)
#readline(prompt='go')
}
################################################
#Fix those that now get an extra outlier
#add it one sd above the max x and max y, or w/e is appropriate for the upper corner that works
#if it's not sig, add the outlier close to above the mean.
for(i in which(pres=='outlier')){
x<-xes[i,1:n]
y<-yes[i,1:n]
n<-nes[i]
sig.i<-pvals[i]<.05
#grab the middle point from x and y
mx<-rep(mean(x),n)
my<-rep(mean(y),n)
distvec<-sqrt((mx-x)^2+(my-y)^2)
switch<-which(distvec==min(distvec))
#NOTE IT PREV VERSIONS THIS NICE DEALY LET US RANDOMLY PUT THE OUTLIER IN W/E CORNER WE WANTED
#Put it in an UPPER CORNER
if(tvals[i]<0 & sig.i) { #slope going down
x[switch]<-min(x)-sd(x)
y[switch]<-max(y)+sd(y)
}
if(tvals[i]>0 & sig.i) {
x[switch]<-max(x)+sd(x)
y[switch]<-max(y)+sd(y)
}
if(!sig.i){
#leave X where it is now
y[switch]<-max(y)+sd(y)*sqrt(2)
}
tvals[i]<-summary(lm(y~x))$coeff[2,3]
pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
}
#save(list=c('xes','yes','nreps','pbins','pvals','tvals','nes','pres'),file='data_for_1plots_coursera2.RData')
#load('data_for_1plots_coursera2.RData')
#Note, this works b/c there's no replicates
for(i in 1:nreps){
n<-nes[i]
x<-xes[i,1:n]
y<-yes[i,1:n]
pval<-pvals[i]
tval<-tvals[i]
m<-lm(y~x)
style<-pres[i]
t2<-'Data'
if(style=='lowess') t2<-'with Lowess Line'
if(style=='bestFit') t2<-'with OLS Best Fit Line'
title<-paste('Sample ',t2,sep='')
xl<-paste("Cranial Electrode",floor(runif(1,11,44)),"(Standardized)")
yl<-paste("Cranial Electrode",floor(runif(1,53,97)),"(Standardized)")
drx<-diff(range(x))
dry<-diff(range(y))
probnum<-paste0(rep(1:7,each=2),rep(c('-1','-2'),times=7))
png(paste0("images/coursera2_#",probnum[i],'_',pres[i],'_pval-',round(pvals[i],digits=3),".png"), width = 400, height = 400)
par(mfrow=c(1,1))
plot(x,y,xlab='X',ylab='Y',main=title)
if(style=='lowess') lines(lowess(x,y))
if(style=='bestFit') abline(m$coef)
if(style=='axesScale')plot(x,y,xlab='X',ylab='Y',main=title,xlim=c(min(x)-1.5*sd(x),max(x)+1.5*sd(x)),ylim=c(min(y)-1.5*sd(y),max(y)+1.5*sd(y)))
if(style=='outlier')plot(x,y,xlab='X',ylab='Y',main=title,xlim=c(min(x)-.1*drx,max(x)+.1*drx),ylim=c(min(y)-.1*dry,max(y)+.1*dry) )
if(style=='axesLabel') plot(x,y,xlab=xl,ylab=yl,main=title)
dev.off()
}
rm(list=ls())
#COURSERA STUFF
#Here we're using 7 questions
#Each with 2 versions, one significant one not
#Questions are: Small sample (35), medium sample (100) (reference),
#large sample (200), axis scale, labels, outlier, bestfit
set.seed(234031)
#Intro question:
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera")
nreps<-14
pbreaks<-c(.023,.025,.33,.35,1)
pbins<-rep(c(2,4),times=7)
nes<-c(35,35,100,100,200,200,rep(100,times=8))
yes<-matrix(nrow=nreps,ncol=max(nes))
xes<-matrix(nrow=nreps,ncol=max(nes))
pvals<-1 #initialize variables
tvals<-1
pres<-(rep(c('n35','n100ref','n200','bestFit','axesScale','axesLabel','outlier'),each=2))
#dropping Lowess here
#First generate baseline data
#then add presentation data (same data + presentaion vector)
#then change data for when the twist is adding an outlier
for(i in 1:nreps){
tryagain<-T
#	if(i %in% c(1:100*nreps/100)) print(i)
while(tryagain){ #to ENSURE that we get a good mix of p-value ranges
#get t close to what we want
t<-qnorm(pbreaks[pbins[i]],mean=0,sd=1,lower.tail=F)
if(abs(t)>5)t<-0 #guards against when the bin is 1, and quantile has infinite size
n<-nes[i]
x<-rnorm(n)
e<-rnorm(n)
bhat<-t*sd(e)/(sqrt(n)*sd(x))
if(pbins[i]>=5 & sample(c(2,2,1),1)==2) bhat<-0 #sometimes generate it actually from a null
y<-x*bhat*sample(c(-1,1),1)+e
tvals[i]<-summary(lm(y~x))$coeff[2,3]
pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
pi<-pvals[i]
bini<-min(which(pi<pbreaks))
if(bini==pbins[i]) tryagain<-F
}
#plot(x,y,main=n)
#readline(prompt='go')
}
################################################
#Fix those that now get an extra outlier
#add it one sd above the max x and max y, or w/e is appropriate for the upper corner that works
#if it's not sig, add the outlier close to above the mean.
for(i in which(pres=='outlier')){
x<-xes[i,1:n]
y<-yes[i,1:n]
n<-nes[i]
sig.i<-pvals[i]<.05
#grab the middle point from x and y
mx<-rep(mean(x),n)
my<-rep(mean(y),n)
distvec<-sqrt((mx-x)^2+(my-y)^2)
switch<-which(distvec==min(distvec))
#NOTE IT PREV VERSIONS THIS NICE DEALY LET US RANDOMLY PUT THE OUTLIER IN W/E CORNER WE WANTED
#Put it in an UPPER CORNER
if(tvals[i]<0 & sig.i) { #slope going down
x[switch]<-min(x)-sd(x)
y[switch]<-max(y)+sd(y)
}
if(tvals[i]>0 & sig.i) {
x[switch]<-max(x)+sd(x)
y[switch]<-max(y)+sd(y)
}
if(!sig.i){
#leave X where it is now
y[switch]<-max(y)+sd(y)*sqrt(2)
}
tvals[i]<-summary(lm(y~x))$coeff[2,3]
pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
}
#save(list=c('xes','yes','nreps','pbins','pvals','tvals','nes','pres'),file='data_for_1plots_coursera2.RData')
#load('data_for_1plots_coursera2.RData')
#Note, this works b/c there's no replicates
for(i in 1:nreps){
n<-nes[i]
x<-xes[i,1:n]
y<-yes[i,1:n]
pval<-pvals[i]
tval<-tvals[i]
m<-lm(y~x)
style<-pres[i]
t2<-'Data'
if(style=='lowess') t2<-'with Lowess Line'
if(style=='bestFit') t2<-'with OLS Best Fit Line'
title<-paste('Sample ',t2,sep='')
xl<-paste("Cranial Electrode",floor(runif(1,11,44)),"(Standardized)")
yl<-paste("Cranial Electrode",floor(runif(1,53,97)),"(Standardized)")
drx<-diff(range(x))
dry<-diff(range(y))
probnum<-paste0(rep(1:7,each=2),rep(c('-1','-2'),times=7))
png(paste0("images/coursera2_#",probnum[i],'_',pres[i],'_pval-',round(pvals[i],digits=3),".png"), width = 400, height = 400)
par(mfrow=c(1,1))
plot(x,y,xlab='X',ylab='Y',main=title)
if(style=='lowess') lines(lowess(x,y))
if(style=='bestFit') abline(m$coef)
if(style=='axesScale')plot(x,y,xlab='X',ylab='Y',main=title,xlim=c(min(x)-1.5*sd(x),max(x)+1.5*sd(x)),ylim=c(min(y)-1.5*sd(y),max(y)+1.5*sd(y)))
if(style=='outlier')plot(x,y,xlab='X',ylab='Y',main=title,xlim=c(min(x)-.1*drx,max(x)+.1*drx),ylim=c(min(y)-.1*dry,max(y)+.1*dry) )
if(style=='axesLabel') plot(x,y,xlab=xl,ylab=yl,main=title)
dev.off()
}
#COURSERA STUFF
#Here we're using 7 questions
#Each with 2 versions, one significant one not
#Questions are: Small sample (35), medium sample (100) (reference),
#large sample (200), axis scale, labels, outlier, bestfit
set.seed(234032)
#Intro question:
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/Coursera")
nreps<-14
pbreaks<-c(.023,.025,.33,.35,1)
pbins<-rep(c(2,4),times=7)
nes<-c(35,35,100,100,200,200,rep(100,times=8))
yes<-matrix(nrow=nreps,ncol=max(nes))
xes<-matrix(nrow=nreps,ncol=max(nes))
pvals<-1 #initialize variables
tvals<-1
pres<-(rep(c('n35','n100ref','n200','bestFit','axesScale','axesLabel','outlier'),each=2))
#dropping Lowess here
#First generate baseline data
#then add presentation data (same data + presentaion vector)
#then change data for when the twist is adding an outlier
for(i in 1:nreps){
tryagain<-T
#	if(i %in% c(1:100*nreps/100)) print(i)
while(tryagain){ #to ENSURE that we get a good mix of p-value ranges
#get t close to what we want
t<-qnorm(pbreaks[pbins[i]],mean=0,sd=1,lower.tail=F)
if(abs(t)>5)t<-0 #guards against when the bin is 1, and quantile has infinite size
n<-nes[i]
x<-rnorm(n)
e<-rnorm(n)
bhat<-t*sd(e)/(sqrt(n)*sd(x))
if(pbins[i]>=5 & sample(c(2,2,1),1)==2) bhat<-0 #sometimes generate it actually from a null
y<-x*bhat*sample(c(-1,1),1)+e
tvals[i]<-summary(lm(y~x))$coeff[2,3]
pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
pi<-pvals[i]
bini<-min(which(pi<pbreaks))
if(bini==pbins[i]) tryagain<-F
}
#plot(x,y,main=n)
#readline(prompt='go')
}
################################################
#Fix those that now get an extra outlier
#add it one sd above the max x and max y, or w/e is appropriate for the upper corner that works
#if it's not sig, add the outlier close to above the mean.
for(i in which(pres=='outlier')){
x<-xes[i,1:n]
y<-yes[i,1:n]
n<-nes[i]
sig.i<-pvals[i]<.05
#grab the middle point from x and y
mx<-rep(mean(x),n)
my<-rep(mean(y),n)
distvec<-sqrt((mx-x)^2+(my-y)^2)
switch<-which(distvec==min(distvec))
#NOTE IT PREV VERSIONS THIS NICE DEALY LET US RANDOMLY PUT THE OUTLIER IN W/E CORNER WE WANTED
#Put it in an UPPER CORNER
if(tvals[i]<0 & sig.i) { #slope going down
x[switch]<-min(x)-sd(x)
y[switch]<-max(y)+sd(y)
}
if(tvals[i]>0 & sig.i) {
x[switch]<-max(x)+sd(x)
y[switch]<-max(y)+sd(y)
}
if(!sig.i){
#leave X where it is now
y[switch]<-max(y)+sd(y)*sqrt(2)
}
tvals[i]<-summary(lm(y~x))$coeff[2,3]
pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
}
#save(list=c('xes','yes','nreps','pbins','pvals','tvals','nes','pres'),file='data_for_1plots_coursera2.RData')
#load('data_for_1plots_coursera2.RData')
#Note, this works b/c there's no replicates
for(i in 1:nreps){
n<-nes[i]
x<-xes[i,1:n]
y<-yes[i,1:n]
pval<-pvals[i]
tval<-tvals[i]
m<-lm(y~x)
style<-pres[i]
t2<-'Data'
if(style=='lowess') t2<-'with Lowess Line'
if(style=='bestFit') t2<-'with OLS Best Fit Line'
title<-paste('Sample ',t2,sep='')
xl<-paste("Cranial Electrode",floor(runif(1,11,44)),"(Standardized)")
yl<-paste("Cranial Electrode",floor(runif(1,53,97)),"(Standardized)")
drx<-diff(range(x))
dry<-diff(range(y))
probnum<-paste0(rep(1:7,each=2),rep(c('-1','-2'),times=7))
png(paste0("images/coursera2_#",probnum[i],'_',pres[i],'_pval-',round(pvals[i],digits=3),".png"), width = 400, height = 400)
par(mfrow=c(1,1))
plot(x,y,xlab='X',ylab='Y',main=title)
if(style=='lowess') lines(lowess(x,y))
if(style=='bestFit') abline(m$coef)
if(style=='axesScale')plot(x,y,xlab='X',ylab='Y',main=title,xlim=c(min(x)-1.5*sd(x),max(x)+1.5*sd(x)),ylim=c(min(y)-1.5*sd(y),max(y)+1.5*sd(y)))
if(style=='outlier')plot(x,y,xlab='X',ylab='Y',main=title,xlim=c(min(x)-.1*drx,max(x)+.1*drx),ylim=c(min(y)-.1*dry,max(y)+.1*dry) )
if(style=='axesLabel') plot(x,y,xlab=xl,ylab=yl,main=title)
dev.off()
}
hist(x)
hist(x[1])
hist(x[1,])
dim(x)
dim(xes)
hist(xes[1,])
hist(xes[2,])
hist(xes[3,])
hist(xes[4,])
hist(xes[5,])
hist(xes[6,])
hist(xes[,])
hist(xes[7,])
hist(xes[8,])
hist(xes[9,])
hist(xes[10,])
ls()
rm(list=ls())
```{r results='hide'}
carpenter<-read.csv('/Users/aaronfisher/Documents/JH/Causal Liz Stewart/HW2/FDA-Carpenter-HW.csv')
dim(carpenter)
names(carpenter)
head(carpenter)
```
t.test(acttime[carpenter$treat==0],acttime[carpenter$treat==1])
#(ii)
summary(lm(acttime~treat+orderent+hospdisc+lethal+acutediz+natreg+wpnoavg3+condavg3+stafcder,data=carpenter))$coef
set.seed(1234)
system.time({
ps.carpenter.ATE <- ps(treat ~ orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder, data = carpenter, verbose=FALSE, estimand ="ATE")
})
carpenter.balance <- bal.table(ps.carpenter.ATE)
print(carpenter.balance)
hist(ps.carpenter.ATE$ps[treat==1,1])
hist(ps.carpenter.ATE$ps[treat==0,1])
plot(ps.carpenter.ATE,type='jitter')
carpenter.balance <- bal.table(ps.carpenter.ATE)
print(carpenter.balance)
hist(ps.carpenter.ATE$ps[treat==1,1])
hist(ps.carpenter.ATE$ps[treat==0,1])
plot(ps.carpenter.ATE,type='jitter')
plot(ps.carpenter.ATE, plots="boxplot")
plot(ps.carpenter.ATE, plots="t")
plot(ps.carpenter.ATE, plots='es')
summary(ps.carpenter.ATE$gbm.obj, n.trees = ps.carpenter.ATE$gbm.obj$n.trees, plot=FALSE)
print(carpenter.balance)
hist(w.ATE[treat==1])
hist(w.ATE[treat==0])
summary(w.ATE[treat==1])
hist(w.ATE[treat==1])
hist(w.ATE[treat==0])
hist(carpenter$w.ATE[treat==1])
get.weights(ps.carpenter.ATE, estimand ="ATE", stop.method="ks.mean")
hist(carpenter$w.ATE[treat==1])
w.ATE <- get.weights(ps.carpenter.ATE, estimand ="ATE", stop.method="ks.mean")
ls()
hist(w.ATE[treat==1])
hist(w.ATE[treat==0])
summary(w.ATE[treat==1])
summary(w.ATE[treat==0])
library(survey)
design.ATE <- svydesign(ids=~1, weights=~w.ATE,data=carpenter)
glm1 <- svyglm(acttime ~ treat, design=design.ATE,family=gaussian)
summary(glm1)
glm2 <- svyglm(acttime ~ treat + orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder,design=design.ATE)
summary(glm2)
hist(ps.carpenter.ATE$ps[carpenter$treat==1,1])
summary(glm2)
set.seed(1234)
system.time({
ps.carpenter.ATT <- ps(treat ~ orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder, data = carpenter, verbose=FALSE, estimand ="ATT")
})
detach(carpenter)
carpenter$w.ATT <- get.weights(ps.carpenter.ATT, estimand ="ATT", stop.method="ks.mean")
attach(carpenter)
hist(w.ATT[treat==1])
hist(w.ATT[treat==0])
summary(w.ATT[treat==1])
summary(w.ATT[treat==0])
design.ATT <- svydesign(ids=~1, weights=~w.ATT,data=carpenter)
glm1ATT <- svyglm(acttime ~ treat, design=design.ATT,family=gaussian)
summary(glm1ATT)
glm2ATT <- svyglm(acttime ~ treat + orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder,design=design.ATT)
summary(glm2ATT)
hist(carpenter$w.ATT[treat==1])
hist(carpenter$w.ATT[treat==0])
hist(carpenter$w.ATT[treat==1])
carpenter$w.ATT[treat==1]
hist(carpenter$w.ATT[treat==1])
hist(carpenter$w.ATT[treat==0])
summary(carpenter$w.ATT[treat==1])
summary(carpenter$w.ATT[treat==0])
hist(carpenter$w.ATT[treat==1])
design.ATT <- svydesign(ids=~1, weights=~w.ATT,data=carpenter)
glm1ATT <- svyglm(acttime ~ treat, design=design.ATT,family=gaussian)
summary(glm1ATT)
glm2ATT <- svyglm(acttime ~ treat + orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder,design=design.ATT)
summary(glm2ATT)
summary(carpenter$w.ATT[treat==1])
summary(carpenter$w.ATT[treat==0])
carpenter$w.ATT <- get.weights(ps.carpenter.ATT, estimand ="ATT", stop.method="ks.mean")
print(bal.table(ps.carpenter.ATT))
)
plot(ps.carpenter.ATT,type='boxplot'     )
plot(ps.carpenter.ATT,type='es')
ps.logit <- glm(treat ~ orderent + hospdisc + lethal + acutediz + natreg +wpnoavg3 + condavg3 +stafcder, data = carpenter,family = binomial)
print(summary(ps.logit))
N.s<-summary(m.out.subclass)$qn[1,]
N.s <- rep(NA, max(data.subcl$subclass))
# N = total number of people in data
N <- dim(data.subcl)[1]
# Run regression model within each subclass
for(s in 1:max(data.subcl$subclass)){
tmp <- lm(acttime ~ treat + orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder, data=data.subcl, subset=subclass==s)
effects[s] <- tmp$coef[2]
vars[s] <- summary(tmp)$coef[2,2]^2
N.s[s] <- sum(data.subcl$subclass==s)
}
# Calculate overall effects, averaging across subclasses
# Subclasses weighted by the total number in the subclass (N.s)
#Don't weight by inverse variance??? That wouldn't estimate the effect of interest?
effect <- sum((N.s/N)*effects)
stderror <- sqrt(sum((N.s/N)^2*vars))
print("Subclass specific effects and variances")
print(rbind(effects,vars))
print("Overall effect and standard error")
print(rbind(effect,stderror))
install.packages("MatchIt")
library(MatchIt)
# Subclassification
m.out.subclass <- matchit(treat ~ orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder, data = carpenter, method ="subclass")
print(summary(m.out.subclass, standardize=TRUE))
# Outcome analysis after subclassification: estimation # within subclasses
# Get matched data, with subclass indicators in an extra column
data.subcl <- match.data(m.out.subclass)
# Create vectors to hold the subclass specific effects #(effects) and variances (vars) and the number of
# people in each subclass (N.s); this will actually happen in the loop below.
effects <- rep(NA, max(data.subcl$subclass))
vars <- rep(NA, max(data.subcl$subclass)) #will hold variance of estimates in each subclass
# Count how many people in each subclass
N.s <- rep(NA, max(data.subcl$subclass))
# N = total number of people in data
N <- dim(data.subcl)[1]
# Run regression model within each subclass
for(s in 1:max(data.subcl$subclass)){
tmp <- lm(acttime ~ treat + orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder, data=data.subcl, subset=subclass==s)
effects[s] <- tmp$coef[2]
vars[s] <- summary(tmp)$coef[2,2]^2
N.s[s] <- sum(data.subcl$subclass==s)
}
effect <- sum((N.s/N)*effects)
stderror <- sqrt(sum((N.s/N)^2*vars))
print("Subclass specific effects and variances")
print(rbind(effects,vars))
print("Overall effect and standard error")
print(rbind(effect,stderror))
N.s<-summary(m.out.subclass)$qn[1,]
summary(m.out.subclass)
summary(m.out.subclass)$qn
summary(m.out.subclass)$qn[1,]
m.nearest <- matchit(treat ~ orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder, data = carpenter, method ="nearest")
print(summary(m.nearest, standardize=TRUE))
(summary(m.nearest))
plot(m.nearest,type='jitter')
plot(m.nearest,type='jitter',main='Nearest Neighbor Matching')
plot(m.nearest,type='jitter',main='Nearest Neighbor Matching',interactive=FALSE)
?plot.matchit
plot(m.nearest,type='jitter',main='Nearest Neighbor Matching',interactive=FALSE)
plot(m.nearest,type='jitter',interactive=FALSE)
plot(s.near2)
s.near <- summary(m.nearest, standardize=TRUE, interactions=FALSE)
plot(s.near)
plot(s.near)
s.near <- summary(m.nearest, standardize=TRUE, interactions=FALSE)
plot(s.near,interactive=FALSE)
m.optimal <- matchit(treat ~ orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder, data = carpenter, method ="optimal")
print(summary(m.optimal, standardize=TRUE))
plot(m.optimal,type='jitter',interactive=FALSE)
s.opt <- summary(m.optimal, standardize=TRUE, interactions=FALSE)
plot(s.opt,interactive=FALSE)
plot(s.near,interactive=FALSE)
plot(s.opt,interactive=FALSE)
plot(s.near,interactive=FALSE)
plot(s.opt,interactive=FALSE)
m.nearest.replace <- matchit(treat ~ orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder, data = carpenter, method ="nearest",ratio=2,replace=T)
print(summary(m.nearest.replace, standardize=TRUE))
plot(m.optimal,type='jitter',interactive=FALSE)
s.near2 <- summary(m.nearest.replace, standardize=TRUE, interactions=FALSE)
plot(s.near2)
plot(s.opt,interactive=FALSE)
plot(s.opt,interactive=FALSE)
plot(s.near2,interactive=FALSE)
plot(s.opt,interactive=FALSE)
dat.opt<-match.data(m.optimal)
summary(lm(acttime~treat+orderent+hospdisc+lethal+acutediz+natreg+wpnoavg3+condavg3+stafcder,data=dat.opt,weights=w.ATT))
summary(lm(acttime~treat+orderent+hospdisc+lethal+acutediz+natreg+wpnoavg3+condavg3+stafcder,data=dat.opt))
dim(dat.opt)
dim(carpenter)
treat<-carpenter$treat
summary(glm1)$coef[2,]
svyglm(acttime ~ treat, design=design.ATE,family=gaussian)
summary(glm1)$coef
summary(glm1)$coef[2,]
#Estimate of treatment, adjusting for covariates
glm2 <- svyglm(acttime ~ treat + orderent + hospdisc + lethal + acutediz + natreg + wpnoavg3 + condavg3 + stafcder,design=design.ATE)
summary(glm2)$coef[2,]
w.ATE <- get.weights(ps.carpenter.ATE, estimand ="ATE", stop.method="ks.mean")
library(twang)
library(matchit)
library(MatchIt)
boxplot(pscores.logit[treat==0]) #here it doesn't look so bad...
ps.logit <- glm(treat ~ orderent + hospdisc + lethal + acutediz + natreg +wpnoavg3 + condavg3 +stafcder, data = carpenter,family = binomial)
print(summary(ps.logit))
# Get the propensity scores for each person
pscores.logit <- predict(ps.logit, type="response")
boxplot(pscores.logit[treat==1])
boxplot(pscores.logit[treat==0]) #here it doesn't look so bad...
summary(glm2ATT)$coef
summary(glm2ATT)$coef[2,]
pscores.logit <- predict(ps.logit, type="response")
bal.logit <- dx.wts(carpenter$w.logit.att, "ATT", data=carpenter, vars=c("orderent","hospdisc",
summary(lm(acttime~treat+orderent+hospdisc+lethal+acutediz+natreg+wpnoavg3+condavg3+stafcder,data=dat.opt))$coef
