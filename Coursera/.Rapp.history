plot(log(log(x))/log(x),type='l')
x<-x*2
plot(log(log(x))/log(x),type='l')
x[15]
exp(exp(1))
loglog(20)/log(20)
log(log(20))/log(20)
log(log(10))/log(10)
log(log(exp(exp(1)))/log(exp(exp(1))
)
h<-exp(exp(1))
log(log(h))
log(log(h))/log(h)
k<-25^2
k
k<-25^4
k
kstar<-log(log(k))/log(k)
kstar
dk<-kstar/(1-kstar)
dk
k/log(k)
k^(1/(1+dk))
k^(1/(1+dk-.01))
k^(1/(1+dk+.01))
(k-1)^(1/(1+dk))
(k-1)/log(k-1)
k<-1023102
log(k)/(log(k)-log(log(k) ))
log(k)/(log(k)-log(log(k) ))-1
kstar<-log(log(k))/log(k)
d_k<-kstar/(1-kstar)
d_k
δ
δ<-6
δ+5
β=3
δ+β
β ≤ 3
∞
∞<-3
∞
α <-3
α
rm(list=ls())
x<-matrix(1:10,nrow=2)
x
d<-matrix(c(1,0),nrow=1)
d
d<-matrix(c(1,0),nrow=2)
d
x%*%d
d<-matrix(c(1,0,0,0,0),nrow=2)
d
d<-matrix(c(1,0,0,0,0),nrow=5)
d
x%*%d
β<-4
α<-2
β+α
gamma(2)
gamma(3)
gamma(4)
factorial(3)
x<-1:10
x2<-x^2
cor(x,x2)
x<-1:100
cor(x,x2)
x2<-x^2
cor(x,x2)
cor(x,sin(x))
882.5*12+918*8
882.5*12+918*8+1800
882.5*12+918*8+1800+221.53
times <- c(70, 11, 66, 5, 20, 4, 35, 40, 29, 9) n <- length(times)theta.hat <- mean(times)alpha <- 0.05L <- qgamma(alpha/2, n, 1)U <- qgamma(1 - alpha/2, n, 1)## 95% CIc(theta.hat * n/U, theta.hat * n/L)
times <- c(70, 11, 66, 5, 20, 4, 35, 40, 29, 9)
times <- c(70, 11, 66, 5, 20, 4, 35, 40, 29, 9) n <- length(times)
theta.hat <- mean(times)
times <- c(70, 11, 66, 5, 20, 4, 35, 40, 29, 9) n <- length(times)
times <- c(70, 11, 66, 5, 20, 4, 35, 40, 29, 9)
n <- length(times)
theta.hat <- mean(times)
alpha <- 0.05
L <- qgamma(alpha/2, n, 1)
U <- qgamma(1 - alpha/2, n, 1)
c(theta.hat * n/U, theta.hat * n/L)
L
U
alpha/2
theta.hat
mean(times)
473.96+1083.33+677.08+2184
473.96+1083.33+677.08+2184+918*4
getwd()
x<-read.csv('/Users/aaronfisher/Documents/JH/Causal Liz Stewart/HW3/dat80.csv')
x
class(x)
dim(x)
head(x)
x<-read.csv(file='/Users/aaronfisher/Documents/JH/Causal Liz Stewart/HW3/dat80.csv')
names(x)
attach(x)
head(samesex)
head(morekids)
?t.test
t.test(morekids[samesex],morekids[!samesex])
mean(morekids)
mean(morekids[samesex])
mean(morekids[samesex==1])
t.test(morekids[samesex==0],morekids[samesex==1])
mean(morekids[samesex==0])
mean(morekids[samesex==1])
t.test(morekids[samesex==0],morekids[samesex==1])
mean(morekids[samesex==1])-mean(morekids[samesex==0])
table(morekids, samesex)
N<-dim(x)[1]
table(morekids, samesex)/N
.31+.18+.29+.21
.311+.218
t.test(incomem[morekids==0],incomem[morekids==1])
mean(incomem[morekids==0])
mean(incomem[morekids==1])
mean(incomem[morekids==0])
mean(incomem[morekids==1])
mean(incomem[samesex==0])
mean(incomem[samesex==1])
t.test(incomem[samesex==0],incomem[samesex==1])
mean(incomem[samesex==1])-mean(incomem[samesex==0])
sqrt(var(incomem[samesex==1])+var(incomem[samesex==0]))
sqrt(var(incomem[samesex==1])+var(incomem[samesex==0])/n)
sqrt(var(incomem[samesex==1])+var(incomem[samesex==0]))/sqrt(N)
mean(incomem[samesex==1])-mean(incomem[samesex==0])
sqrt(var(incomem[samesex==1])+var(incomem[samesex==0]))/sqrt(N)
1.96*2*sqrt(var(incomem[samesex==1])+var(incomem[samesex==0]))/sqrt(N)
t.test(incomem[samesex==0],incomem[samesex==1])
7226.668 - 7096.367
62.9009 -197.7000
ttd<-t.test(incomem[samesex==0],incomem[samesex==1])
summary(ttd)
names(ttd)
names(summary(ttd))
names((ttd))
sqrt(var(incomem[samesex==1])+var(incomem[samesex==0]))/sqrt(N)
mean(incomem[samesex==1])-mean(incomem[samesex==0])
130/24
p2-p1
p1<-incomem[samesex==1])
p2<-incomem[samesex==0])
p1<-incomem[samesex==1]
p2<-incomem[samesex==0]
p1-p2
dim(p1)
length(p1)
p1<-mean(incomem[samesex==1])
p2<-mean(incomem[samesex==0])
p1
p2
mean(incomem[samesex==1])-mean(incomem[samesex==0])
var(incomem[samesex==1])
var(incomem[samesex==0])
sqrt(var(incomem[samesex==1])+var(incomem[samesex==0]))
sqrt(var(incomem[samesex==1])+var(incomem[samesex==0]))/sqrt(N)
1.96*sqrt(var(incomem[samesex==1])+var(incomem[samesex==0]))/sqrt(N)
t.test(incomem[samesex==0],incomem[samesex==1])
diff<-  197.7000 - 62.9009
diff
1.96*2*sqrt(var(incomem[samesex==1])+var(incomem[samesex==0]))/sqrt(N)
diff/2
( 7226.668  -7096.367 )*2/diff
ttd<-t.test(incomem[samesex==0],incomem[samesex==1])
ttd
?t.test
t.test(incomem[samesex==0],incomem[samesex==1])
t.test(incomem[samesex==0],incomem[samesex==1],alternative='two.sided')
p2-p1
(p2-p1)/3.7891
43*4
34*4
n_ss<-sum(samesex==1)
n_ds<-sum(samesex==0)
sqrt(var(incomem[samesex==1])/n_ss+var(incomem[samesex==0])/n_ds)
Effectmean(incomem[samesex==1])-mean(incomem[samesex==0])n_ss<-sum(samesex==1)n_ds<-sum(samesex==0)#Std Errorsqrt(var(incomem[samesex==1])/n_ss+var(incomem[samesex==0])/n_ds)
t.test(mean(incomem[samesex==1])-mean(incomem[samesex==0]))
t.test(incomem[samesex==1]-incomem[samesex==0])
t.test(incomem[samesex==1],incomem[samesex==0])
t.test(incomem[morekids==1],incomem[morekids==0])
t.test(incomem[morekids==1&samesex==1],
incomem[morekids==0&samesex==0])
5606.098 0 8206.238
5606.098 - 8206.238
5564.169 - 8157.067
library(sem)
install.packages(sem)
install.packages('sem')
library(sem)
tsls(incomem~morekids,morekids~samesex)
?tsls
tsls(incomem~morekids,~samesex)
tsls1<-tsls(incomem~morekids,~samesex)
summary(tsls1)
tsls2<-tsls(incomem~morekids+AGEM+agefstm,~samesex)
tsls2<-tsls(incomem~morekids+AGEM+ agefstm+ blackm+hispm+ othracem+boy1st+boy2nd,~samesex)
tsls2<-tsls(incomem~morekids+AGEM+ agefstm+ blackm+hispm+ othracem+boy1st+boy2nd,~samesex+AGEM+ agefstm+ blackm+hispm+ othracem+boy1st+boy2nd)
summary(tsls2)
sqrt(var(incomem[samesex==1])/n_ss+var(incomem[samesex==0])/n_ds)
mean(incomem[samesex==1])-mean(incomem[samesex==0])
tsls1<-tsls(incomem~morekids,~samesex)
summary(tsls1)
hist(incomem)
mean(incomem[samesex==1])
mean(incomem[samesex==0])
mean(incomem)
quantile(incomem)
D ##t.test(incomem[samesex==1],incomem[samesex==0])#Effectmean(incomem[samesex==1])-mean(incomem[samesex==0])n_ss<-sum(samesex==1)n_ds<-sum(samesex==0)#Std Errorsqrt(var(incomem[samesex==1])/n_ss+var(incomem[samesex==0])/n_ds)
summary(tsls1)
130/0.529
PROBLEM 4   ########
##  A  ##x<-read.csv(file='/Users/aaronfisher/Documents/JH/Causal Liz Stewart/HW3/dat80.csv')#note, this takes a whileclass(x)dim(x)names(x)attach(x)#
mean(morekids[samesex==0])mean(morekids[samesex==1])mean(morekids[samesex==1])-mean(morekids[samesex==0])t.test(morekids[samesex==0],morekids[samesex==1])##  B  ##N<-dim(x)[1]table(morekids, samesex)/N#
## D ##t.test(incomem[samesex==1],incomem[samesex==0])#Effectmean(incomem[samesex==1])-mean(incomem[samesex==0])n_ss<-sum(samesex==1)n_ds<-sum(samesex==0)#Std Errorsqrt(var(incomem[samesex==1])/n_ss+var(incomem[samesex==0])/n_ds)#
## E ###Nieve "as treated"t.test(incomem[morekids==1],incomem[morekids==0])#"Per protocol"t.test(incomem[morekids==1&samesex==1],		incomem[morekids==0&samesex==0])#
##  G  ##130/0.529##  H  ##library(sem)tsls1<-tsls(incomem~morekids,~samesex)summary(tsls1)##  I  ##tsls2<-tsls(incomem~morekids+AGEM+ agefstm+ blackm+hispm+ othracem+boy1st+boy2nd,~samesex+AGEM+ agefstm+ blackm+hispm+ othracem+boy1st+boy2nd)summary(tsls2)
summary(tsls1)
tsls1<-tsls(incomem~morekids,~samesex)
summary(tsls1)
tsls2<-tsls(incomem~morekids+AGEM+ agefstm+ blackm+hispm+ othracem+boy1st+boy2nd,~samesex+AGEM+ agefstm+ blackm+hispm+ othracem+boy1st+boy2nd)
summary(tsls2)
?qexp
+3.5-1.75
+3.5-1.75-1.5
+3.5-1.75-1.5-1
To prevent outliers where we don't want them, we generate 10 extra xes, and then chop off the bottom and top 5.set.seed(234032)#Intro question:setwd("/Users/aaronfisher/Documents/JH/EDA Versions/EDA Git Repo/Coursera")nversions<-5 #how many times to generate the data?pbreaks<-c(.023,.025,.33,.35,1)pbins.base<-rep(c(2,4),times=7)nes.base<-c(35,35,100,100,200,200,rep(100,times=8))+10 #last 10 will be trimmed offpres.base<-(rep(c('n35','n100ref','n200','bestFit','axesScale','axesLabel','outlier'),each=2))version.base<-rep(1:nversions)#Note, divide by two because sig and nonsig are two diff versionsprobnum.base<-paste0(rep(1:7,each=2),rep(c('-1','-2'),times=7))#
probnum<-rep(probnum.base,each=nversions) #before versionpbins<-rep(pbins.base,each=nversions)nes<-rep(nes.base,each=nversions)pres<-rep(pres.base,each=nversions)version<-rep(version.base,times=length(pbins.base))cbind(pbins,nes,pres,version)nreps<-length(pbins)yes<-matrix(nrow=nreps,ncol=max(nes))xes<-matrix(nrow=nreps,ncol=max(nes))pvals<-1 #initialize variablestvals<-1
i<-1
t<-qnorm(pbreaks[pbins[i]],mean=0,sd=1,lower.tail=F)
if(abs(t)>5)t<-0 #guards against when the bin is 1, and quantile has infinite size
n<-nes[i]
x<-rnorm(n)
hist(x)
x<-x[order(x)[c(1:5,(n-5):n)]
]
hist(x)
x<-rnorm(n)
x2<-x[order(x)[c(1:5,(n-5):n)]]
par(mfrow=c(1,2))
hist(x)
hist(x2)
hist(x,breaks=20)
hist(x2,breaks=20)
x<-rnorm(n)
x2<-x[order(x)[6:(n-5)] ]
hist(x,breaks=20)
hist(x2,breaks=20)
rm(list=ls())
COURSERA STUFF#Here we're using 8 questions#Each with 2 options people can see (with one exception), one significant one not#Questions are: Small sample (35), medium sample (100) (reference),#large sample (200), axis scale, labels, outlier, bestfit#For the medium "reference" sample, each person HAS to see both questions (sig and not) so we have something to compare against.#Then, to cancel out any effects of a "bad generated sample" we make 5 versions of each #All p-values are fixed to be in the range (.023,.025) or in the range (.33,.35).#To prevent outliers where we don't want them, we generate 10 extra xes, and then chop off the bottom and top 5.set.seed(234032)#Intro question:setwd("/Users/aaronfisher/Documents/JH/EDA Versions/EDA Git Repo/Coursera")nversions<-5 #how many times to generate the data?pbreaks<-c(.023,.025,.33,.35,1)pbins.base<-rep(c(2,4),times=7)nes.base<-c(35,35,100,100,200,200,rep(100,times=8))+10 #last 10 will be trimmed offpres.base<-(rep(c('n35','n100ref','n200','bestFit','axesScale','axesLabel','outlier'),each=2))version.base<-rep(1:nversions)#Note, divide by two because sig and nonsig are two diff versionsprobnum.base<-paste0(rep(1:7,each=2),rep(c('-1','-2'),times=7))#
probnum<-rep(probnum.base,each=nversions) #before versionpbins<-rep(pbins.base,each=nversions)nes<-rep(nes.base,each=nversions)pres<-rep(pres.base,each=nversions)version<-rep(version.base,times=length(pbins.base))cbind(pbins,nes,pres,version)nreps<-length(pbins)yes<-matrix(nrow=nreps,ncol=max(nes))xes<-matrix(nrow=nreps,ncol=max(nes))pvals<-1 #initialize variablestvals<-1#dropping Lowess here#First generate baseline data#then add presentation data (same data + presentaion vector)#then change data for when the twist is adding an outlierprint(paste('nreps = ',nreps))pb<-txtProgressBar(min = 1, max = nreps,  char = "=", style = 3)for(i in 1:nreps){	tryagain<-T	while(tryagain){ #to ENSURE that we get a good mix of p-value ranges		#get t close to what we want		t<-qnorm(pbreaks[pbins[i]],mean=0,sd=1,lower.tail=F)		if(abs(t)>5)t<-0 #guards against when the bin is 1, and quantile has infinite size		n<-nes[i]		x<-rnorm(n)		x2<-x[order(x)[6:(n-5)] ] #trim off extra x's		e<-rnorm(n)		bhat<-t*sd(e)/(sqrt(n)*sd(x))		if(pbins[i]>=5 & sample(c(2,2,1),1)==2) bhat<-0 #sometimes generate it actually from a null		y<-x*bhat*sample(c(-1,1),1)+e		tvals[i]<-summary(lm(y~x))$coeff[2,3]		pvals[i]<-summary(lm(y~x))$coeff[2,4]		xes[i,1:n]<-x		yes[i,1:n]<-y		pi<-pvals[i]		bini<-min(which(pi<pbreaks))		if(bini==pbins[i]) tryagain<-F	}		setTxtProgressBar(pb,i)	#plot(x,y,main=n)	#readline(prompt='go')}#
#################################################Fix those that now get an extra outlier#add it one sd above the max x and max y, or w/e is appropriate for the upper corner that works#if it's not sig, add the outlier close to above the mean.for(i in which(pres=='outlier')){  	n<-nes[i]  	x<-xes[i,1:n]  	y<-yes[i,1:n]    sig.i<-pvals[i]<.05  	#grab the middle point from x and y  	mx<-rep(mean(x),n)  	my<-rep(mean(y),n)  	distvec<-sqrt((mx-x)^2+(my-y)^2)  	switch<-which(distvec==min(distvec))#
    #NOTE IT PREV VERSIONS THIS NICE DEALY LET US RANDOMLY PUT THE OUTLIER IN W/E CORNER WE WANTED    #Put it in an UPPER CORNER  	if(tvals[i]<0 & sig.i) { #slope going down  		x[switch]<-min(x)-sd(x)  		y[switch]<-max(y)+sd(y)  	}  	if(tvals[i]>0 & sig.i) {  		x[switch]<-max(x)+sd(x)  		y[switch]<-max(y)+sd(y)  	}    if(!sig.i){      #leave X where it is now      y[switch]<-max(y)+sd(y)*sqrt(2)    }#
  	tvals[i]<-summary(lm(y~x))$coeff[2,3]  	pvals[i]<-summary(lm(y~x))$coeff[2,4]	xes[i,1:n]<-x	yes[i,1:n]<-y}#save(list=c('xes','yes','nreps','pbins','pvals','tvals','nes','pres'),file='data_for_1plots_coursera2.RData')#load('data_for_1plots_coursera2.RData')for(i in 1:nreps){  n<-nes[i]  x<-xes[i,1:n]  y<-yes[i,1:n]  pval<-pvals[i]  tval<-tvals[i]  m<-lm(y~x)  style<-pres[i]  t2<-'Data'  if(style=='lowess') t2<-'with Lowess Line'  if(style=='bestFit') t2<-'with OLS Best Fit Line'  title<-paste('Sample ',t2,sep='')  xl<-paste("Cranial Electrode",floor(runif(1,11,44)),"(Standardized)")  yl<-paste("Cranial Electrode",floor(runif(1,53,97)),"(Standardized)")  drx<-diff(range(x))  dry<-diff(range(y))#
  probnum.base<-paste0(rep(1:7,each=2),rep(c('-1','-2'),times=7))  png(paste0("images no outliers/coursera2_#",probnum[i],'_datVer-',version[i],'_',pres[i],'_pval-',round(pvals[i],digits=3),".png"), width = 400, height = 400)    par(mfrow=c(1,1))  	plot(x,y,xlab='X',ylab='Y',main=title)  	if(style=='lowess') lines(lowess(x,y))  	if(style=='bestFit') abline(m$coef)  	if(style=='axesScale')plot(x,y,xlab='X',ylab='Y',main=title,xlim=c(min(x)-1.5*sd(x),max(x)+1.5*sd(x)),ylim=c(min(y)-1.5*sd(y),max(y)+1.5*sd(y)))    if(style=='outlier')plot(x,y,xlab='X',ylab='Y',main=title,xlim=c(min(x)-.1*drx,max(x)+.1*drx),ylim=c(min(y)-.1*dry,max(y)+.1*dry) )  	if(style=='axesLabel') plot(x,y,xlab=xl,ylab=yl,main=title)  dev.off()}#rm(list=ls())
