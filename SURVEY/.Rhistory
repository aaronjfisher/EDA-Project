x=cos(2*pi/N*i);y=x+1;z=(y-2)*22.5
N<-10
i<-1
x=cos(2*pi/N*i);y=x+1;z=(y-2)*22.5
bitmap(sprintf("Rplot%02d.png",i))
pie(c(y,8-y),col=c("white","yellow"),init.angle=135-z,border=FALSE,labels=NA)
pie(c(y,8-y),col=c("white","yellow"),init.angle=135-z,border=FALSE,labels=NA)
pie(c(y,8-y),col=c("white","yellow"),init.angle=0,border=FALSE,labels=NA)
pie(1,col=c("red"),init.angle=0,border=FALSE,labels=NA)
pie(1,col=c("red"),init.angle=0,border=T,labels=NA)
?pie
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of Statements made \n in support of pie charts')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n (Organized by professor)')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)')
dev.copy2pdf(file='PieChart.pdf')
getwd()
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)',cex=2)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (Organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=2,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=2,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1.4,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1.4,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made \n by professors in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n  in support of pie charts \n  \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n  in support of pie charts \n(organized by professor)',cex=1.5)
dev.copy2pdf(file='PieChart.pdf')
dev.copy2pdf(file='PieChart.pdf')
set.seed(8219)
getwd()
getwd()
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/SURVEY/generate_data_clust_1plot_pilot.r")
getwd()
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/SURVEY")
dir()
load("data_for_1plots_pilot.RData" )
ls()
dim(yes)
y
yes
xes
dim(xes)
dim(yes)
ls()
nes
pvals
plot(nes,pvals)
plot(nes,log(pvals))
plot(nes,pvals,log=y)
plot(nes,pvals,log="y")
pres
getwd()
rm(list=ls())
set.seed(234092)
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/SURVEY")
nreps<-20 #we will end up with twice as many graphs, half of which will be plain and half will have fancy twists
pbreaks<-c(.001,.01,.05,.15,1)
pbins<-rep(1:5,length=nreps)
pbreaks<-c(.001,.01,.05,.15,1)
nes<-c(30,70,140,225,225,140,225,30,70,30,70,140,70,30,70,225,30,225,140,140)
nes
length(nes)
cbind(nes[1:5],nes[6:10],nes[11:15],nes[16:20])
xes<-matrix(nrow=nreps,ncol=max(nes))
yes<-matrix(nrow=nreps,ncol=max(nes))
dim(xes)
pvals<-1
tvals<-1
plot((pbreaks[pbins]),(nes),pch=19,log='x',xaxt='n',col=rep(c('black','blue'),c(10,11)))
plot((pbreaks[pbins]),(nes),pch=19,log='x',xaxt='n',col=rep(c('black','blue'),c(10,11)))
axis(side=1,pbreaks,at=pbreaks)
abline(v=pbreaks[pbins],lty=2)
abline(h=nes,lty=2)
for(i in 1:nreps){
tryagain<-T
if(i %in% c(1:100*nreps/100)) print(i)
while(tryagain){ #to ENSURE that we get a good mix of p-value ranges
#get t close to what we want
t<-qnorm(pbreaks[pbins[i]],mean=0,sd=1,lower.tail=F)
if(abs(t)>5)t<-0 #guards against when the bin is 1, and quantile has infinite size
n<-nes[i]
x<-rnorm(n)
e<-rnorm(n)
bhat<-t*sd(e)/(sqrt(n)*sd(x))
if(pbins[i]>=5 & sample(c(2,2,1),1)==2) bhat<-0 #sometimes generate it actually from a null
y<-x*bhat*sample(c(-1,1),1)+e
tvals[i]<-summary(lm(y~x))$coeff[2,3]
pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
pi<-pvals[i]
bini<-min(which(pi<pbreaks))
if(bini==pbins[i]) tryagain<-F
}
#plot(x,y,main=n)
#readline(prompt='go')
}
head(xes)
#Generate all the data for the plots
#it will get saved, then called back in and cycled through
#Here we're focusing on the game!
set.seed(234092)
#Intro question:
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/SURVEY")
nreps<-20 #we will end up with twice as many graphs, half of which will be plain and half will have fancy twists
#also there will be replicates, so really there will be more like nreps*2.1 plots
#first we generate these nreps values, then we double up by adding another set of the same graphs, but this time with fancy presentations
#five plots will be a separate question
pbreaks<-c(.001,.01,.05,.15,1)
pbins<-rep(1:5,length=nreps)
nes<-c(30,70,140,225,225,140,225,30,70,30,70,140,70,30,70,225,30,225,140,140)
cbind(nes[1:5],nes[6:10],nes[11:15],nes[16:20])
xes<-matrix(nrow=nreps,ncol=max(nes))
yes<-matrix(nrow=nreps,ncol=max(nes))
pvals<-1 #initialize variables
tvals<-1
plot((pbreaks[pbins]),(nes),pch=19,log='x',xaxt='n',col=rep(c('black','blue'),c(10,11)))
axis(side=1,pbreaks,at=pbreaks)
abline(v=pbreaks[pbins],lty=2)
abline(h=nes,lty=2)
#First generate baseline data
#then add presentation data (same data + presentaion vector)
#then change data for when the twist is adding an outlier
#then add replicates of all of the vector to see how consistent people are on the exact same stuff
xes
xes[1,]
x
i
if(i %in% c(1:100*nreps/100)) print(i)
i<-1
#get t close to what we want
t<-qnorm(pbreaks[pbins[i]],mean=0,sd=1,lower.tail=F)
if(abs(t)>5)t<-0 #guards against when the bin is 1, and quantile has infinite size
n<-nes[i]
x<-rnorm(n)
e<-rnorm(n)
bhat<-t*sd(e)/(sqrt(n)*sd(x))
if(pbins[i]>=5 & sample(c(2,2,1),1)==2) bhat<-0 #sometimes generate it actually from a null
y<-x*bhat*sample(c(-1,1),1)+e
tvals[i]<-summary(lm(y~x))$coeff[2,3]
pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
pi<-pvals[i]
bini<-min(which(pi<pbreaks))
if(bini==pbins[i]) tryagain<-F
tryagain
x
n
rm(list=ls())
#Generate all the data for the plots
#it will get saved, then called back in and cycled through
#Here we're focusing on the game!
set.seed(234092)
#Intro question:
setwd("/Users/aaronfisher/Documents/JH/EDA Versions/Sourcetree EDA Git Repo/SURVEY")
nreps<-20 #we will end up with twice as many graphs, half of which will be plain and half will have fancy twists
#also there will be replicates, so really there will be more like nreps*2.1 plots
#first we generate these nreps values, then we double up by adding another set of the same graphs, but this time with fancy presentations
#five plots will be a separate question
pbreaks<-c(.001,.01,.05,.15,1)
pbins<-rep(1:5,length=nreps)
nes<-c(30,70,140,225,225,140,225,30,70,30,70,140,70,30,70,225,30,225,140,140)
cbind(nes[1:5],nes[6:10],nes[11:15],nes[16:20])
xes<-matrix(nrow=nreps,ncol=max(nes))
yes<-matrix(nrow=nreps,ncol=max(nes))
pvals<-1 #initialize variables
tvals<-1
plot((pbreaks[pbins]),(nes),pch=19,log='x',xaxt='n',col=rep(c('black','blue'),c(10,11)))
axis(side=1,pbreaks,at=pbreaks)
abline(v=pbreaks[pbins],lty=2)
abline(h=nes,lty=2)
#First generate baseline data
#then add presentation data (same data + presentaion vector)
#then change data for when the twist is adding an outlier
#then add replicates of all of the vector to see how consistent people are on the exact same stuff
for(i in 1:nreps){
tryagain<-T
if(i %in% c(1:100*nreps/100)) print(i)
while(tryagain){ #to ENSURE that we get a good mix of p-value ranges
#get t close to what we want
t<-qnorm(pbreaks[pbins[i]],mean=0,sd=1,lower.tail=F)
if(abs(t)>5)t<-0 #guards against when the bin is 1, and quantile has infinite size
n<-nes[i]
x<-rnorm(n)
e<-rnorm(n)
bhat<-t*sd(e)/(sqrt(n)*sd(x))
if(pbins[i]>=5 & sample(c(2,2,1),1)==2) bhat<-0 #sometimes generate it actually from a null
y<-x*bhat*sample(c(-1,1),1)+e
tvals[i]<-summary(lm(y~x))$coeff[2,3]
pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
pi<-pvals[i]
bini<-min(which(pi<pbreaks))
if(bini==pbins[i]) tryagain<-F
}
#plot(x,y,main=n)
#readline(prompt='go')
}
image(xes)
pres
pres
pres
npres<-10
sw<-sample(10)
sw
npres<-10
pres<-c(rep('plain',length=10),c('outlier','lowess','bestFit','axesScale','axesLabel')[c(4,4,3,1,5,5,2,3,1,2)])
pres
cbind(pres,pbreaks,nes)
right corner
for(i in which(pres=='outlier')){
n<-nes[i]
#grab the middle point from x and y
mx<-rep(mean(x),n)
my<-rep(mean(y),n)
x<-xes[i,1:n]
y<-yes[i,1:n]
distvec<-sqrt((mx-x)^2+(my-y)^2)
switch<-which(distvec==min(distvec))
#should we add it to the top of the graph or the bottom?
updown<-sample(c('up','down'),1)
#tval conveys if the best fit line is pos or neg
if(updown=='down' & tvals[i]<1) {
x[switch]<-max(x)+sd(x)
y[switch]<-min(y)-sd(y)
}
if(updown=='down' & tvals[i]>1) {
x[switch]<-min(x)-sd(x)
y[switch]<-min(y)-sd(y)
}
if(updown=='up' & tvals[i]<1) {
x[switch]<-min(x)-sd(x)
y[switch]<-max(y)+sd(y)
}
if(updown=='up' & tvals[i]>1) {
x[switch]<-max(x)+sd(x)
y[switch]<-max(y)+sd(y)
}
tvals[i]<-summary(lm(y~x))$coeff[2,3]
pvals[i]<-summary(lm(y~x))$coeff[2,4]
xes[i,1:n]<-x
yes[i,1:n]<-y
}
nreplicates<-2
whichrep<-c(2,4)
if(dim(xes)[1]==nreps){
nes<-c(nes,nes[whichrep])
pbins<-c(pbins,pbins[whichrep])
xes<-rbind(xes,xes[whichrep,])
yes<-rbind(yes,yes[whichrep,])
pvals<-c(pvals,pvals[whichrep])
tvals<-c(tvals,tvals[whichrep])
pres<-c(pres,pres[whichrep])
#origPlot<-c(origPlot,origPlot[whichrep]) ## used when there's overlaping data between plain and styled
}
plot(pvals,(nes),pch=19,log='x',xaxt='n',yaxt='n',col=c('blue','black')[(pres=='plain')+1],ylim=c(0,300))
axis(side=1,pbreaks,at=pbreaks)
axis(side=2,unique(nes),at=unique(nes))
abline(v=pbreaks[pbins],lty=2)
abline(h=nes,lty=2)
text(pvals[pres!="plain"],nes[pres!="plain"]+10,pres[pres!="plain"])
text(pvals[whichrep],nes[whichrep]-10,"rep")
rstudio::viewData(yes)
rm(list=ls())
x<-1:100/100
y<-sin(x)+runif(-.3,.3)
plot(x,y)
y
x
sin(x)
y<-sin(x)+runif(100,-.3,.3)
plot(x,y)
x<-(1:100/100)*2*pi
y<-sin(x)+runif(100,-.3,.3)
plot(x,y)
cbind(x,y)
svd(cbind(x,y))
svd(cbind(x,y))->ss
ss
names(ss)
ss$d
ss$d%*%ss$u[,1]
ss$d%*%ss$u[1,]
ss$d%*%ss$v[,1]
